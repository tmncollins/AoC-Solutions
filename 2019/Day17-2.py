
from intcode import Intcode
from collections import namedtuple

NEW_LINE = 10
SCAFFOLD = 35
BLANK = 46
DIR_LEFT = 3
DIR_UP = 0
DIR_DOWN = 1
DIR_RIGHT = 2
ASCII_LEFT = 60
ASCII_RIGHT = 62
ASCII_UP = 94
ASCII_DOWN = 118
ALL_ASCII_DIR = [ASCII_DOWN, ASCII_LEFT, ASCII_RIGHT, ASCII_UP]

import temp as intcode


class Robot(object):

    def __init__(self, program):

        self.scaffold, self.pos, self.move = set(), None, None

        run = Intcode(program)

        x = 0
        y = 0
        last = -1
        self.width = 0

        while not run.isTerminated():
            output = run.nextO()
#            print(output)
            if output[0] == SCAFFOLD:
                self.scaffold.add((x, y))
                x += 1
            elif output[0] == NEW_LINE:
                if last == NEW_LINE: break
                self.width = max(x, self.width)
                y += 1
                x = 0
            elif output[0] == ASCII_LEFT:
                self.pos = (x, y)
                self.move = (-1, 0)
                x += 1
            elif output[0] == ASCII_RIGHT:
                self.pos = (x, y)
                self.move = (1, 0)
                x += 1
            elif output[0] == ASCII_UP:
                self.pos = (x, y)
                self.move = (0, -1)
                x += 1
            elif output[0] == ASCII_DOWN:
                self.pos = (x, y)
                self.move = (0, 1)
                x += 1
            else:
                x += 1
            last = output[0]

        self.height = y
        self.start = self.pos
        self.start_dir = self.move

        self.intersections = set()

        for x, y in self.scaffold:
            if (x-1, y) in self.scaffold and (x+1, y) in self.scaffold and \
                    (x, y-1) in self.scaffold and (x, y+1) in self.scaffold:
                self.intersections.add((x,y))

    def part1(self):
        ans = 0
        for x, y in self.intersections:
            ans += x*y
        return ans

    def output(self):
        print("?")
        for y in range(self.height):
            for x in range(self.width):
                if (x,y) in self.scaffold:
                    print("#", end="")
                else:
                    print(".", end="")
            print()


def get_path(scaffold, u, dir):

    def rotate_left(dir):
        return dir[1], -dir[0]
    def rotate_right(dir):
        return -dir[1], dir[0]

    path = ""
    cnt = 0

    while True:
        v = (u[0] + dir[0], u[1] + dir[1])
        if v in scaffold:
            # move forward
            u = v
            cnt += 1
            continue
        dir_l = rotate_left(dir)
        dir_r = rotate_right(dir)
        l = (u[0] + dir_l[0], u[1] + dir_l[1])
        r = (u[0] + dir_r[0], u[1] + dir_r[1])
        if l in scaffold:
            # move left
            if cnt > 0:
                path += str(cnt) + ","
            path += "L,"
            cnt = 1
            dir = dir_l
            u = l
        elif r in scaffold:
            # move right
            if cnt > 0:
                path += str(cnt) + ","
            path += "R,"
            cnt = 1
            dir = dir_r
            u = r
            continue
        else: break



    path += str(cnt)

    return path


    return "L,6,R,12,L,4,L,6,R,6,L,6,R,12,R,6,L,6,R,12,L,6,L,10,L,10,R,6,L,6,R,12,L,4,L,6,R,6,L,6,R,12,L,6,L,10,L,10,R,6,L,6,R,12,L,4,L,6,R,6,L,6,R,12,L,6,L,10,L,10,R,6"


def splitInstructions(instruct):
    max_mem = 20
    A = ""
    B = ""
    C = ""
    found = False
    for a in range(1, 21):
        for b in range(1, 21):
            for c in range(1, 21):
                ins = instruct + ","
                A = ins[:a]
                ins = ins.replace(A + ",", "")
                B = ins[:b]
                ins = ins.replace(B + ",", "")
                C = ins[:c]
#                print(A, "-", B, "-", C)
                ins = ins.replace(C + ",", "")
#                print(ins)
                if ins == "":
                    found = True
                    break
            if found: break
        if found: break

    if not found: return None

    ins = instruct
    main = ins.replace(A, "A").replace(B, "B").replace(C, "C")
    return main + "\n" + A + "\n" + B + "\n" + C + "\n"


def part2(program):
    global r

    program[0] = 2

    path = get_path(r.scaffold, r.start, r.start_dir)

    inp = splitInstructions(path) + "n\n"

    inp = [ord(i) for i in inp] + [0,0,0]
    run = Intcode(program)

    out = 0
    while not run.isTerminated():
        output = run.nextI(inp.pop(0))
        if len(output) > 0:
            out = max(out, max(output))
    return out

code = [1,330,331,332,109,3448,1101,0,1182,16,1101,0,1439,24,101,0,0,570,1006,570,36,102,1,571,0,1001,570,-1,570,1001,24,1,24,1105,1,18,1008,571,0,571,1001,16,1,16,1008,16,1439,570,1006,570,14,21102,58,1,0,1105,1,786,1006,332,62,99,21102,1,333,1,21101,73,0,0,1106,0,579,1102,1,0,572,1102,1,0,573,3,574,101,1,573,573,1007,574,65,570,1005,570,151,107,67,574,570,1005,570,151,1001,574,-64,574,1002,574,-1,574,1001,572,1,572,1007,572,11,570,1006,570,165,101,1182,572,127,1002,574,1,0,3,574,101,1,573,573,1008,574,10,570,1005,570,189,1008,574,44,570,1006,570,158,1105,1,81,21102,340,1,1,1105,1,177,21101,0,477,1,1105,1,177,21102,514,1,1,21102,176,1,0,1105,1,579,99,21101,184,0,0,1106,0,579,4,574,104,10,99,1007,573,22,570,1006,570,165,101,0,572,1182,21101,0,375,1,21101,0,211,0,1105,1,579,21101,1182,11,1,21102,1,222,0,1106,0,979,21102,1,388,1,21101,233,0,0,1106,0,579,21101,1182,22,1,21101,244,0,0,1105,1,979,21102,401,1,1,21102,255,1,0,1106,0,579,21101,1182,33,1,21101,266,0,0,1105,1,979,21102,1,414,1,21101,277,0,0,1105,1,579,3,575,1008,575,89,570,1008,575,121,575,1,575,570,575,3,574,1008,574,10,570,1006,570,291,104,10,21101,0,1182,1,21102,1,313,0,1105,1,622,1005,575,327,1101,0,1,575,21102,327,1,0,1106,0,786,4,438,99,0,1,1,6,77,97,105,110,58,10,33,10,69,120,112,101,99,116,101,100,32,102,117,110,99,116,105,111,110,32,110,97,109,101,32,98,117,116,32,103,111,116,58,32,0,12,70,117,110,99,116,105,111,110,32,65,58,10,12,70,117,110,99,116,105,111,110,32,66,58,10,12,70,117,110,99,116,105,111,110,32,67,58,10,23,67,111,110,116,105,110,117,111,117,115,32,118,105,100,101,111,32,102,101,101,100,63,10,0,37,10,69,120,112,101,99,116,101,100,32,82,44,32,76,44,32,111,114,32,100,105,115,116,97,110,99,101,32,98,117,116,32,103,111,116,58,32,36,10,69,120,112,101,99,116,101,100,32,99,111,109,109,97,32,111,114,32,110,101,119,108,105,110,101,32,98,117,116,32,103,111,116,58,32,43,10,68,101,102,105,110,105,116,105,111,110,115,32,109,97,121,32,98,101,32,97,116,32,109,111,115,116,32,50,48,32,99,104,97,114,97,99,116,101,114,115,33,10,94,62,118,60,0,1,0,-1,-1,0,1,0,0,0,0,0,0,1,40,18,0,109,4,2101,0,-3,587,20101,0,0,-1,22101,1,-3,-3,21101,0,0,-2,2208,-2,-1,570,1005,570,617,2201,-3,-2,609,4,0,21201,-2,1,-2,1105,1,597,109,-4,2105,1,0,109,5,1201,-4,0,629,21002,0,1,-2,22101,1,-4,-4,21101,0,0,-3,2208,-3,-2,570,1005,570,781,2201,-4,-3,653,20101,0,0,-1,1208,-1,-4,570,1005,570,709,1208,-1,-5,570,1005,570,734,1207,-1,0,570,1005,570,759,1206,-1,774,1001,578,562,684,1,0,576,576,1001,578,566,692,1,0,577,577,21102,1,702,0,1106,0,786,21201,-1,-1,-1,1105,1,676,1001,578,1,578,1008,578,4,570,1006,570,724,1001,578,-4,578,21102,1,731,0,1106,0,786,1105,1,774,1001,578,-1,578,1008,578,-1,570,1006,570,749,1001,578,4,578,21101,0,756,0,1105,1,786,1106,0,774,21202,-1,-11,1,22101,1182,1,1,21101,0,774,0,1106,0,622,21201,-3,1,-3,1105,1,640,109,-5,2105,1,0,109,7,1005,575,802,20101,0,576,-6,20101,0,577,-5,1106,0,814,21101,0,0,-1,21101,0,0,-5,21101,0,0,-6,20208,-6,576,-2,208,-5,577,570,22002,570,-2,-2,21202,-5,41,-3,22201,-6,-3,-3,22101,1439,-3,-3,1201,-3,0,843,1005,0,863,21202,-2,42,-4,22101,46,-4,-4,1206,-2,924,21101,1,0,-1,1106,0,924,1205,-2,873,21102,1,35,-4,1106,0,924,2102,1,-3,878,1008,0,1,570,1006,570,916,1001,374,1,374,1202,-3,1,895,1102,1,2,0,2101,0,-3,902,1001,438,0,438,2202,-6,-5,570,1,570,374,570,1,570,438,438,1001,578,558,922,20102,1,0,-4,1006,575,959,204,-4,22101,1,-6,-6,1208,-6,41,570,1006,570,814,104,10,22101,1,-5,-5,1208,-5,49,570,1006,570,810,104,10,1206,-1,974,99,1206,-1,974,1102,1,1,575,21101,973,0,0,1105,1,786,99,109,-7,2106,0,0,109,6,21102,0,1,-4,21102,0,1,-3,203,-2,22101,1,-3,-3,21208,-2,82,-1,1205,-1,1030,21208,-2,76,-1,1205,-1,1037,21207,-2,48,-1,1205,-1,1124,22107,57,-2,-1,1205,-1,1124,21201,-2,-48,-2,1106,0,1041,21101,0,-4,-2,1105,1,1041,21101,-5,0,-2,21201,-4,1,-4,21207,-4,11,-1,1206,-1,1138,2201,-5,-4,1059,2101,0,-2,0,203,-2,22101,1,-3,-3,21207,-2,48,-1,1205,-1,1107,22107,57,-2,-1,1205,-1,1107,21201,-2,-48,-2,2201,-5,-4,1090,20102,10,0,-1,22201,-2,-1,-2,2201,-5,-4,1103,2101,0,-2,0,1105,1,1060,21208,-2,10,-1,1205,-1,1162,21208,-2,44,-1,1206,-1,1131,1106,0,989,21101,439,0,1,1106,0,1150,21101,0,477,1,1106,0,1150,21101,0,514,1,21101,1149,0,0,1105,1,579,99,21102,1157,1,0,1106,0,579,204,-2,104,10,99,21207,-3,22,-1,1206,-1,1138,2102,1,-5,1176,1201,-4,0,0,109,-6,2106,0,0,0,7,34,1,5,1,34,1,5,1,34,1,5,1,34,1,5,1,34,1,5,1,34,1,5,1,23,5,6,1,5,1,23,1,3,1,6,1,5,1,23,1,3,1,6,1,5,1,23,1,3,1,6,11,17,11,8,1,3,1,17,1,1,1,3,1,3,1,8,7,11,7,3,1,3,1,12,1,1,1,11,1,3,1,5,1,3,1,12,1,1,1,11,1,3,1,5,1,3,1,12,1,1,1,11,1,3,1,5,1,3,1,12,7,7,1,1,13,14,1,3,1,7,1,1,1,1,1,5,1,18,13,1,1,1,1,5,7,16,1,9,1,1,1,28,1,5,7,28,1,5,1,3,1,30,1,3,7,30,1,3,1,1,1,34,1,3,1,1,1,34,1,3,1,1,1,28,13,28,1,5,1,3,1,30,1,5,5,30,1,40,7,40,1,40,1,1,1,38,1,1,1,38,1,1,1,38,1,1,1,38,7,36,1,3,1,36,11,34,1,5,1,34,1,5,1,34,1,5,1,34,1,5,1,34,1,5,1,34,1,5,1,34,1,5,1,34,1,5,1,34,1,5,1,34,7,12]
code = [1,330,331,332,109,3524,1102,1182,1,16,1102,1457,1,24,102,1,0,570,1006,570,36,1001,571,0,0,1001,570,-1,570,1001,24,1,24,1105,1,18,1008,571,0,571,1001,16,1,16,1008,16,1457,570,1006,570,14,21101,0,58,0,1106,0,786,1006,332,62,99,21102,1,333,1,21102,1,73,0,1105,1,579,1102,1,0,572,1101,0,0,573,3,574,101,1,573,573,1007,574,65,570,1005,570,151,107,67,574,570,1005,570,151,1001,574,-64,574,1002,574,-1,574,1001,572,1,572,1007,572,11,570,1006,570,165,101,1182,572,127,102,1,574,0,3,574,101,1,573,573,1008,574,10,570,1005,570,189,1008,574,44,570,1006,570,158,1106,0,81,21102,1,340,1,1105,1,177,21102,477,1,1,1105,1,177,21101,0,514,1,21101,0,176,0,1106,0,579,99,21101,184,0,0,1106,0,579,4,574,104,10,99,1007,573,22,570,1006,570,165,1002,572,1,1182,21101,375,0,1,21102,1,211,0,1106,0,579,21101,1182,11,1,21102,1,222,0,1105,1,979,21101,388,0,1,21102,233,1,0,1105,1,579,21101,1182,22,1,21102,1,244,0,1105,1,979,21101,0,401,1,21101,0,255,0,1105,1,579,21101,1182,33,1,21101,0,266,0,1105,1,979,21102,414,1,1,21102,277,1,0,1106,0,579,3,575,1008,575,89,570,1008,575,121,575,1,575,570,575,3,574,1008,574,10,570,1006,570,291,104,10,21101,1182,0,1,21102,313,1,0,1106,0,622,1005,575,327,1102,1,1,575,21101,0,327,0,1105,1,786,4,438,99,0,1,1,6,77,97,105,110,58,10,33,10,69,120,112,101,99,116,101,100,32,102,117,110,99,116,105,111,110,32,110,97,109,101,32,98,117,116,32,103,111,116,58,32,0,12,70,117,110,99,116,105,111,110,32,65,58,10,12,70,117,110,99,116,105,111,110,32,66,58,10,12,70,117,110,99,116,105,111,110,32,67,58,10,23,67,111,110,116,105,110,117,111,117,115,32,118,105,100,101,111,32,102,101,101,100,63,10,0,37,10,69,120,112,101,99,116,101,100,32,82,44,32,76,44,32,111,114,32,100,105,115,116,97,110,99,101,32,98,117,116,32,103,111,116,58,32,36,10,69,120,112,101,99,116,101,100,32,99,111,109,109,97,32,111,114,32,110,101,119,108,105,110,101,32,98,117,116,32,103,111,116,58,32,43,10,68,101,102,105,110,105,116,105,111,110,115,32,109,97,121,32,98,101,32,97,116,32,109,111,115,116,32,50,48,32,99,104,97,114,97,99,116,101,114,115,33,10,94,62,118,60,0,1,0,-1,-1,0,1,0,0,0,0,0,0,1,52,26,0,109,4,1201,-3,0,586,21001,0,0,-1,22101,1,-3,-3,21102,0,1,-2,2208,-2,-1,570,1005,570,617,2201,-3,-2,609,4,0,21201,-2,1,-2,1105,1,597,109,-4,2106,0,0,109,5,1201,-4,0,629,21002,0,1,-2,22101,1,-4,-4,21101,0,0,-3,2208,-3,-2,570,1005,570,781,2201,-4,-3,653,20102,1,0,-1,1208,-1,-4,570,1005,570,709,1208,-1,-5,570,1005,570,734,1207,-1,0,570,1005,570,759,1206,-1,774,1001,578,562,684,1,0,576,576,1001,578,566,692,1,0,577,577,21102,1,702,0,1106,0,786,21201,-1,-1,-1,1105,1,676,1001,578,1,578,1008,578,4,570,1006,570,724,1001,578,-4,578,21102,1,731,0,1105,1,786,1105,1,774,1001,578,-1,578,1008,578,-1,570,1006,570,749,1001,578,4,578,21101,0,756,0,1105,1,786,1105,1,774,21202,-1,-11,1,22101,1182,1,1,21101,0,774,0,1106,0,622,21201,-3,1,-3,1105,1,640,109,-5,2105,1,0,109,7,1005,575,802,20102,1,576,-6,20101,0,577,-5,1106,0,814,21101,0,0,-1,21101,0,0,-5,21101,0,0,-6,20208,-6,576,-2,208,-5,577,570,22002,570,-2,-2,21202,-5,53,-3,22201,-6,-3,-3,22101,1457,-3,-3,1201,-3,0,843,1005,0,863,21202,-2,42,-4,22101,46,-4,-4,1206,-2,924,21101,0,1,-1,1106,0,924,1205,-2,873,21102,1,35,-4,1105,1,924,2102,1,-3,878,1008,0,1,570,1006,570,916,1001,374,1,374,1202,-3,1,895,1101,0,2,0,2102,1,-3,902,1001,438,0,438,2202,-6,-5,570,1,570,374,570,1,570,438,438,1001,578,558,922,20101,0,0,-4,1006,575,959,204,-4,22101,1,-6,-6,1208,-6,53,570,1006,570,814,104,10,22101,1,-5,-5,1208,-5,39,570,1006,570,810,104,10,1206,-1,974,99,1206,-1,974,1101,0,1,575,21102,973,1,0,1106,0,786,99,109,-7,2105,1,0,109,6,21102,1,0,-4,21102,1,0,-3,203,-2,22101,1,-3,-3,21208,-2,82,-1,1205,-1,1030,21208,-2,76,-1,1205,-1,1037,21207,-2,48,-1,1205,-1,1124,22107,57,-2,-1,1205,-1,1124,21201,-2,-48,-2,1106,0,1041,21102,1,-4,-2,1105,1,1041,21102,1,-5,-2,21201,-4,1,-4,21207,-4,11,-1,1206,-1,1138,2201,-5,-4,1059,1202,-2,1,0,203,-2,22101,1,-3,-3,21207,-2,48,-1,1205,-1,1107,22107,57,-2,-1,1205,-1,1107,21201,-2,-48,-2,2201,-5,-4,1090,20102,10,0,-1,22201,-2,-1,-2,2201,-5,-4,1103,2102,1,-2,0,1106,0,1060,21208,-2,10,-1,1205,-1,1162,21208,-2,44,-1,1206,-1,1131,1105,1,989,21101,439,0,1,1106,0,1150,21101,477,0,1,1106,0,1150,21101,0,514,1,21102,1149,1,0,1105,1,579,99,21102,1,1157,0,1105,1,579,204,-2,104,10,99,21207,-3,22,-1,1206,-1,1138,1201,-5,0,1176,2102,1,-4,0,109,-6,2106,0,0,14,11,1,11,30,1,9,1,1,1,9,1,30,1,7,9,5,1,30,1,7,1,1,1,1,1,3,1,5,1,30,1,7,1,1,1,1,1,3,1,5,1,30,1,7,1,1,1,1,1,3,1,5,1,30,1,1,9,1,1,3,1,5,1,30,1,1,1,5,1,3,1,3,1,5,1,30,1,1,1,5,1,3,9,1,1,30,1,1,1,5,1,7,1,3,1,1,1,30,9,7,7,32,1,17,1,34,1,11,9,32,1,11,1,5,1,1,1,32,9,3,1,5,1,1,1,40,1,3,1,5,1,1,1,40,1,3,1,5,1,1,1,40,1,3,1,7,1,40,1,3,1,7,7,34,1,3,1,13,1,30,9,13,1,30,1,3,1,17,1,28,7,17,1,28,1,1,1,21,1,28,1,1,1,21,1,28,1,1,1,21,1,28,1,1,1,21,11,18,1,1,1,32,7,3,9,1,1,32,1,5,1,3,1,9,1,32,1,5,1,3,1,1,9,32,1,5,1,3,1,1,1,40,1,5,1,3,1,1,1,40,1,5,1,3,1,1,1,40,1,5,1,3,1,1,1,40,1,5,1,3,1,1,1,40,1,5,7,40,1,9,1,42,11,42]
CODE = list(code)
r = Robot(code)
print("Part 1:", r.part1())
print("Part 2:", part2(list(CODE)))
#r.output()

# ####################
# L,6,R,12,L,4,L,6
# R,6,L,6,R,12
# L,6,L,10,L,10,R,6
#[0, 1, 1, 2, 0, 1, 2, 0, 1, 2]
# L,6,R,12,L,4,L,6,R,6,L,6,R,12,R,6,L,6,R,12,L,6,L,10,L,10,R,6,L,6,R,12,L,4,L,6,R,6,L,6,R,12,L,6,L,10,L,10,R,6,L,6,R,12,L,4,L,6,R,6,L,6,R,12,L,6,L,10,L,10,R,6
"""
CCCCCCB                                  
C     B                                  
C     B                                  
C     B                                  
C     B                                  
C     B                                  
C     B                       AAAAA      
C     B                       A   A      
C     B                       A   A      
C     B                       A   A      
CCCCCCBCCCC                 ##A###A####  
      B   C                 # A   A   #  
      BBBBBBB           BBBBBBA   A   #  
          C B           B   #     A   #  
          C B           B   #     A   #  
          C B           B   #     A   #  
          CABAAAA       B ########A####  
            B   A       B # #     A      
            BBBBBBBBBBBBB # #     AAAAAA^
                A         # #            
                A     #######            
                A     #   #              
                A   A######              
                A   A #                  
                A   A #                  
                A   A #                  
          ######A###A##                  
          #     A   A                    
          #     AAAAA                    
          #                              
          #######                        
                #                        
                # #                      
                # #                      
                # #                      
                # #                      
                #######                  
                  #   #                  
                  ###########            
                      #     #            
                      #     #            
                      #     #            
                      #     #            
                      #     #            
                      #     #            
                      #     #            
                      #     #            
                      #     #            
                      #######
                      """
