from time import sleep
from collections import deque

MAX_H = 50

all_instructions = []

def generate_instructions(curr=""):
    if len(curr) > 20: return
    all_instructions.append(curr)

    if curr[-1] == "L" or curr[-1] == "R":
        curr += ","
        for i in range(2,13):
            generate_instructions(curr + str(i))

    else:
        generate_instructions(curr + "L")
        generate_instructions(curr + "R")


#def try_move(camera, pos, M):


def try_instructions(camera, A, B, C):
    pos = (0, 0, 0)
    to_see = 0
    for y in range(len(camera)):
        for x in range(len(camera[y])):
            if camera[y][x] == "^":
                pos = (x,y,0)
            elif camera[y][x] == "#":
                to_see += 1

    q = deque()
    q.append((pos, 0, ""))
    while True:
        pos, seen, path = q.popleft()
        move_a = try_move(camera, pos, A)
        if move_a:
            new_pos, new_see = move_a
            if new_see + seen == to_see:
                return path + "A"




def get_instructions(camera):

    generate_instructions()

    for A in all_instructions:
        for B in all_instructions:
            for C in all_instructions:
                if try_instructions(A, B, C):
                    return



from collections import defaultdict
from intcode import Intcode
class robot:
    global NEW_LINE, SCAFFOLD, DIR_LEFT, DIR_RIGHT, DIR_UP, DIR_DOWN
    global ALL_ASCII_DIR, ASCII_UP, ASCII_DOWN, ASCII_LEFT, ASCII_RIGHT, BLANK
    NEW_LINE = 10
    SCAFFOLD = 35
    BLANK = 46
    DIR_LEFT = 3
    DIR_UP = 0
    DIR_DOWN = 1
    DIR_RIGHT = 2
    ASCII_LEFT = 60
    ASCII_RIGHT = 62
    ASCII_UP = 94
    ASCII_DOWN = 118
    ALL_ASCII_DIR = [ASCII_DOWN, ASCII_LEFT, ASCII_RIGHT, ASCII_UP]

    def __init__(self):
        self.grid = [[]]
        self.scaffold = set()
        self.pos = (0, 0)
        self.dir = 0

    def toNum(self, v):
        return ord(v)

    def cameraReading(self, n):
        #    print(n)
        if n == NEW_LINE:  # New line
            self.grid.append([])
        else:
            self.grid[-1].append(chr(n))
            if n == SCAFFOLD:
                self.scaffold.add((len(self.grid[-1]) - 1, len(self.grid) - 1))
            if n in ALL_ASCII_DIR:
                self.scaffold.add((len(self.grid[-1]) - 1, len(self.grid) - 1))
                if n == ASCII_DOWN: self.dir = DIR_DOWN
                if n == ASCII_UP: self.dir = DIR_UP
                if n == ASCII_LEFT: self.dir = DIR_LEFT
                if n == ASCII_RIGHT: self.dir = DIR_RIGHT
                self.pos = (len(self.grid[-1]) - 1, len(self.grid) - 1)

    def getIntersections(self):
        inter = set()
        for y in range(len(self.grid)):
            for x in range(len(self.grid[y])):
                all_dir = [(0, -1), (0, 1), (1, 0), (-1, 0)]
                c = 0
                for d in all_dir:
                    if (x + d[0], y + d[1]) in self.scaffold:
                        c += 1
                    else:
                        break
                if c == 4 and (x, y) in self.scaffold:
                    inter.add((x, y))
        return inter

    def part1(self, computer):
        c = 0
        while not computer.isTerminated() and c < MAX_H:
            output = computer.nextO()
            if output[0] == NEW_LINE:
#                print()
                c += 1
#                print(c)
#                self.printGrid()
            self.cameraReading(output[0])

        inter = self.getIntersections()
        tot = 0
        for item in inter:
            tot += item[0] * item[1]

        self.printGrid()

        return tot

    def printGrid(self):
        #    for line in self.grid: print("".join(line))
        inter = self.getIntersections()
        for y in range(len(self.grid)):
            for x in range(len(self.grid[y])):
                if (x, y) in inter:
                    print("O", end="")
                else:
                    print(self.grid[y][x], end="")
            print()

    def rotate(self, l, d):
        if l:
            # Rotate Left
            if d == 0: return 3
            if d == 1: return 2
            if d == 2: return 0
            if d == 3: return 1
        else:
            # Rotate rIGHT
            if d == 0: return 2
            if d == 1: return 3
            if d == 2: return 1
            if d == 3: return 0

    def generateInstructions(self):
        all_dirs = [(0, -1), (0, 1), (1, 0), (-1, 0)]  # 0 is Up, 1 is Down, 2 is Right, 3 is Left
        instruct = []
        # First ensure rotation is correct

        if (self.pos[0] + all_dirs[self.dir][0], self.pos[1] + all_dirs[self.dir][1]) in self.scaffold:
            direct = self.dir
        else:
            d = self.rotate(True, self.dir)
            d2 = self.rotate(False, self.dir)
            if (self.pos[0] + all_dirs[d][0], self.pos[1] + all_dirs[d][1]) in self.scaffold:
                # Rotate Left
                direct = d
                instruct.append("L")
            elif (self.pos[0] + all_dirs[d2][0], self.pos[1] + all_dirs[d2][1]) in self.scaffold:
                # Rotate Right
                direct = d2
                instruct.append("R")

        # Let's go!
        p = (self.pos[0], self.pos[1])
        while p in self.scaffold:
            c = 0
            while (p[0] + all_dirs[direct][0], p[1] + all_dirs[direct][1]) in self.scaffold:
                c += 1
                p = (p[0] + all_dirs[direct][0], p[1] + all_dirs[direct][1])
            instruct.append(str(c))

            # Rotate
            d = self.rotate(True, direct)
            d2 = self.rotate(False, direct)
            if (p[0] + all_dirs[d][0], p[1] + all_dirs[d][1]) in self.scaffold:
                # Rotate Left
                direct = d
                instruct.append("L")
            elif (p[0] + all_dirs[d2][0], p[1] + all_dirs[d2][1]) in self.scaffold:
                # Rotate Right
                direct = d2
                instruct.append("R")
            else:
                break

        #      print("ins", instruct)
        #      sleep(0.25)

        return ",".join(instruct)

    #

    # A,B
    # L,10,R,8,L,6,R,6 16
    # L,8,L,8,R,8 11
    # R,8,L,6,L,10,L,10 17

    def splitInstructions(self, instruct):
        max_mem = 20
        A = ""
        B = ""
        C = ""
        for a in range(1, 21):
            for b in range(1, 21):
                for c in range(1, 21):
                    ins = instruct + ","
                    A = ins[:a]
                    B = ins[a+1:a+1+b]
                    C = ins[a+b+2:a+b+c+2]
#                    print(A, B, C)
                    ins = ins.replace(A, "").replace(B, "").replace(C, "")
                    print(ins)
                    if list(set(ins))[0] == ",": break


        # Convert instruct to A,B,C
        # TEMP
#        A = "L,6,R,12,L,4"
#        B = "R,6,L,6,R,12"
#        C = "L,6,L,10,L,10"
        #    C = "R,8,L,6,L,1,9,L,1,9"

        ins = instruct.split(",")
        a, b, c = A.split(","), B.split(","), C.split(",")
        a, b, c = ",".join(a), ",".join(b), ",".join(c)
        i = 0
        pause = 0
        ans = []

        while i < len(ins):
            j = ",".join(ins[pause:i + 1])
            if j not in a and j not in b and j not in c:
                j = ",".join(ins[pause:i])
                #        print(j,a,b,c)
                if j == a:
                    ans.append("A")
                elif j == b:
                    ans.append("B")
                else:
                    ans.append("C")
                pause = i
                i -= 2
            i += 1
        j = ",".join(ins[pause:])
        if j == a:
            ans.append("A")
        elif j == b:
            ans.append("B")
        else:
            ans.append("C")

        print(ans, a, b, c)
        if (a[0] == ","): a = a[1:]
        if a[-1] == ",": a = a[:-1]
        if (b[0] == ","): b = b[1:]
        if b[-1] == ",": b = b[:-1]
        if (c[0] == ","): c = c[1:]
        if c[-1] == ",": c = c[:-1]

        return ",".join(ans) + "\n" + a + "\n" + b + "\n" + c + "\n"

    def writeGrid(self, grid=list):
        self.grid = grid.copy()
        self.scaffold = set()
        for y in range(len(self.grid)):
            for x in range(len(self.grid[y])):
                if self.grid[y][x] == "#":
                    self.scaffold.add((x, y))

    def writePos(self, pos, direct):
        self.pos = (pos[0], pos[1])
        self.dir = direct

    def part2(self, computer, ins, video):

        # Process Input
        inp = []
        for item in ins:
            inp.append(self.toNum(item))

        if video:
            inp.append(self.toNum("y"))
        else:
            inp.append(self.toNum("n"))

        inp.append(10)
        inp.append(10)
        inp.append(10)
        inp.append(10)

        print(inp)
        ans = 0
        #    ans = computer.nextI(0)
        while not computer.isTerminated():
            i = inp.pop(0)
            ans = computer.nextI(i)
#            print("Out:", list(ans))
#            print(i)

        return ans


r = robot()

data = [1,330,331,332,109,3448,1101,0,1182,16,1101,0,1439,24,101,0,0,570,1006,570,36,102,1,571,0,1001,570,-1,570,1001,24,1,24,1105,1,18,1008,571,0,571,1001,16,1,16,1008,16,1439,570,1006,570,14,21102,58,1,0,1105,1,786,1006,332,62,99,21102,1,333,1,21101,73,0,0,1106,0,579,1102,1,0,572,1102,1,0,573,3,574,101,1,573,573,1007,574,65,570,1005,570,151,107,67,574,570,1005,570,151,1001,574,-64,574,1002,574,-1,574,1001,572,1,572,1007,572,11,570,1006,570,165,101,1182,572,127,1002,574,1,0,3,574,101,1,573,573,1008,574,10,570,1005,570,189,1008,574,44,570,1006,570,158,1105,1,81,21102,340,1,1,1105,1,177,21101,0,477,1,1105,1,177,21102,514,1,1,21102,176,1,0,1105,1,579,99,21101,184,0,0,1106,0,579,4,574,104,10,99,1007,573,22,570,1006,570,165,101,0,572,1182,21101,0,375,1,21101,0,211,0,1105,1,579,21101,1182,11,1,21102,1,222,0,1106,0,979,21102,1,388,1,21101,233,0,0,1106,0,579,21101,1182,22,1,21101,244,0,0,1105,1,979,21102,401,1,1,21102,255,1,0,1106,0,579,21101,1182,33,1,21101,266,0,0,1105,1,979,21102,1,414,1,21101,277,0,0,1105,1,579,3,575,1008,575,89,570,1008,575,121,575,1,575,570,575,3,574,1008,574,10,570,1006,570,291,104,10,21101,0,1182,1,21102,1,313,0,1105,1,622,1005,575,327,1101,0,1,575,21102,327,1,0,1106,0,786,4,438,99,0,1,1,6,77,97,105,110,58,10,33,10,69,120,112,101,99,116,101,100,32,102,117,110,99,116,105,111,110,32,110,97,109,101,32,98,117,116,32,103,111,116,58,32,0,12,70,117,110,99,116,105,111,110,32,65,58,10,12,70,117,110,99,116,105,111,110,32,66,58,10,12,70,117,110,99,116,105,111,110,32,67,58,10,23,67,111,110,116,105,110,117,111,117,115,32,118,105,100,101,111,32,102,101,101,100,63,10,0,37,10,69,120,112,101,99,116,101,100,32,82,44,32,76,44,32,111,114,32,100,105,115,116,97,110,99,101,32,98,117,116,32,103,111,116,58,32,36,10,69,120,112,101,99,116,101,100,32,99,111,109,109,97,32,111,114,32,110,101,119,108,105,110,101,32,98,117,116,32,103,111,116,58,32,43,10,68,101,102,105,110,105,116,105,111,110,115,32,109,97,121,32,98,101,32,97,116,32,109,111,115,116,32,50,48,32,99,104,97,114,97,99,116,101,114,115,33,10,94,62,118,60,0,1,0,-1,-1,0,1,0,0,0,0,0,0,1,40,18,0,109,4,2101,0,-3,587,20101,0,0,-1,22101,1,-3,-3,21101,0,0,-2,2208,-2,-1,570,1005,570,617,2201,-3,-2,609,4,0,21201,-2,1,-2,1105,1,597,109,-4,2105,1,0,109,5,1201,-4,0,629,21002,0,1,-2,22101,1,-4,-4,21101,0,0,-3,2208,-3,-2,570,1005,570,781,2201,-4,-3,653,20101,0,0,-1,1208,-1,-4,570,1005,570,709,1208,-1,-5,570,1005,570,734,1207,-1,0,570,1005,570,759,1206,-1,774,1001,578,562,684,1,0,576,576,1001,578,566,692,1,0,577,577,21102,1,702,0,1106,0,786,21201,-1,-1,-1,1105,1,676,1001,578,1,578,1008,578,4,570,1006,570,724,1001,578,-4,578,21102,1,731,0,1106,0,786,1105,1,774,1001,578,-1,578,1008,578,-1,570,1006,570,749,1001,578,4,578,21101,0,756,0,1105,1,786,1106,0,774,21202,-1,-11,1,22101,1182,1,1,21101,0,774,0,1106,0,622,21201,-3,1,-3,1105,1,640,109,-5,2105,1,0,109,7,1005,575,802,20101,0,576,-6,20101,0,577,-5,1106,0,814,21101,0,0,-1,21101,0,0,-5,21101,0,0,-6,20208,-6,576,-2,208,-5,577,570,22002,570,-2,-2,21202,-5,41,-3,22201,-6,-3,-3,22101,1439,-3,-3,1201,-3,0,843,1005,0,863,21202,-2,42,-4,22101,46,-4,-4,1206,-2,924,21101,1,0,-1,1106,0,924,1205,-2,873,21102,1,35,-4,1106,0,924,2102,1,-3,878,1008,0,1,570,1006,570,916,1001,374,1,374,1202,-3,1,895,1102,1,2,0,2101,0,-3,902,1001,438,0,438,2202,-6,-5,570,1,570,374,570,1,570,438,438,1001,578,558,922,20102,1,0,-4,1006,575,959,204,-4,22101,1,-6,-6,1208,-6,41,570,1006,570,814,104,10,22101,1,-5,-5,1208,-5,49,570,1006,570,810,104,10,1206,-1,974,99,1206,-1,974,1102,1,1,575,21101,973,0,0,1105,1,786,99,109,-7,2106,0,0,109,6,21102,0,1,-4,21102,0,1,-3,203,-2,22101,1,-3,-3,21208,-2,82,-1,1205,-1,1030,21208,-2,76,-1,1205,-1,1037,21207,-2,48,-1,1205,-1,1124,22107,57,-2,-1,1205,-1,1124,21201,-2,-48,-2,1106,0,1041,21101,0,-4,-2,1105,1,1041,21101,-5,0,-2,21201,-4,1,-4,21207,-4,11,-1,1206,-1,1138,2201,-5,-4,1059,2101,0,-2,0,203,-2,22101,1,-3,-3,21207,-2,48,-1,1205,-1,1107,22107,57,-2,-1,1205,-1,1107,21201,-2,-48,-2,2201,-5,-4,1090,20102,10,0,-1,22201,-2,-1,-2,2201,-5,-4,1103,2101,0,-2,0,1105,1,1060,21208,-2,10,-1,1205,-1,1162,21208,-2,44,-1,1206,-1,1131,1106,0,989,21101,439,0,1,1106,0,1150,21101,0,477,1,1106,0,1150,21101,0,514,1,21101,1149,0,0,1105,1,579,99,21102,1157,1,0,1106,0,579,204,-2,104,10,99,21207,-3,22,-1,1206,-1,1138,2102,1,-5,1176,1201,-4,0,0,109,-6,2106,0,0,0,7,34,1,5,1,34,1,5,1,34,1,5,1,34,1,5,1,34,1,5,1,34,1,5,1,23,5,6,1,5,1,23,1,3,1,6,1,5,1,23,1,3,1,6,1,5,1,23,1,3,1,6,11,17,11,8,1,3,1,17,1,1,1,3,1,3,1,8,7,11,7,3,1,3,1,12,1,1,1,11,1,3,1,5,1,3,1,12,1,1,1,11,1,3,1,5,1,3,1,12,1,1,1,11,1,3,1,5,1,3,1,12,7,7,1,1,13,14,1,3,1,7,1,1,1,1,1,5,1,18,13,1,1,1,1,5,7,16,1,9,1,1,1,28,1,5,7,28,1,5,1,3,1,30,1,3,7,30,1,3,1,1,1,34,1,3,1,1,1,34,1,3,1,1,1,28,13,28,1,5,1,3,1,30,1,5,5,30,1,40,7,40,1,40,1,1,1,38,1,1,1,38,1,1,1,38,1,1,1,38,7,36,1,3,1,36,11,34,1,5,1,34,1,5,1,34,1,5,1,34,1,5,1,34,1,5,1,34,1,5,1,34,1,5,1,34,1,5,1,34,1,5,1,34,7,12]
#data = [1,330,331,332,109,3524,1102,1182,1,16,1102,1457,1,24,102,1,0,570,1006,570,36,1001,571,0,0,1001,570,-1,570,1001,24,1,24,1105,1,18,1008,571,0,571,1001,16,1,16,1008,16,1457,570,1006,570,14,21101,0,58,0,1106,0,786,1006,332,62,99,21102,1,333,1,21102,1,73,0,1105,1,579,1102,1,0,572,1101,0,0,573,3,574,101,1,573,573,1007,574,65,570,1005,570,151,107,67,574,570,1005,570,151,1001,574,-64,574,1002,574,-1,574,1001,572,1,572,1007,572,11,570,1006,570,165,101,1182,572,127,102,1,574,0,3,574,101,1,573,573,1008,574,10,570,1005,570,189,1008,574,44,570,1006,570,158,1106,0,81,21102,1,340,1,1105,1,177,21102,477,1,1,1105,1,177,21101,0,514,1,21101,0,176,0,1106,0,579,99,21101,184,0,0,1106,0,579,4,574,104,10,99,1007,573,22,570,1006,570,165,1002,572,1,1182,21101,375,0,1,21102,1,211,0,1106,0,579,21101,1182,11,1,21102,1,222,0,1105,1,979,21101,388,0,1,21102,233,1,0,1105,1,579,21101,1182,22,1,21102,1,244,0,1105,1,979,21101,0,401,1,21101,0,255,0,1105,1,579,21101,1182,33,1,21101,0,266,0,1105,1,979,21102,414,1,1,21102,277,1,0,1106,0,579,3,575,1008,575,89,570,1008,575,121,575,1,575,570,575,3,574,1008,574,10,570,1006,570,291,104,10,21101,1182,0,1,21102,313,1,0,1106,0,622,1005,575,327,1102,1,1,575,21101,0,327,0,1105,1,786,4,438,99,0,1,1,6,77,97,105,110,58,10,33,10,69,120,112,101,99,116,101,100,32,102,117,110,99,116,105,111,110,32,110,97,109,101,32,98,117,116,32,103,111,116,58,32,0,12,70,117,110,99,116,105,111,110,32,65,58,10,12,70,117,110,99,116,105,111,110,32,66,58,10,12,70,117,110,99,116,105,111,110,32,67,58,10,23,67,111,110,116,105,110,117,111,117,115,32,118,105,100,101,111,32,102,101,101,100,63,10,0,37,10,69,120,112,101,99,116,101,100,32,82,44,32,76,44,32,111,114,32,100,105,115,116,97,110,99,101,32,98,117,116,32,103,111,116,58,32,36,10,69,120,112,101,99,116,101,100,32,99,111,109,109,97,32,111,114,32,110,101,119,108,105,110,101,32,98,117,116,32,103,111,116,58,32,43,10,68,101,102,105,110,105,116,105,111,110,115,32,109,97,121,32,98,101,32,97,116,32,109,111,115,116,32,50,48,32,99,104,97,114,97,99,116,101,114,115,33,10,94,62,118,60,0,1,0,-1,-1,0,1,0,0,0,0,0,0,1,52,26,0,109,4,1201,-3,0,586,21001,0,0,-1,22101,1,-3,-3,21102,0,1,-2,2208,-2,-1,570,1005,570,617,2201,-3,-2,609,4,0,21201,-2,1,-2,1105,1,597,109,-4,2106,0,0,109,5,1201,-4,0,629,21002,0,1,-2,22101,1,-4,-4,21101,0,0,-3,2208,-3,-2,570,1005,570,781,2201,-4,-3,653,20102,1,0,-1,1208,-1,-4,570,1005,570,709,1208,-1,-5,570,1005,570,734,1207,-1,0,570,1005,570,759,1206,-1,774,1001,578,562,684,1,0,576,576,1001,578,566,692,1,0,577,577,21102,1,702,0,1106,0,786,21201,-1,-1,-1,1105,1,676,1001,578,1,578,1008,578,4,570,1006,570,724,1001,578,-4,578,21102,1,731,0,1105,1,786,1105,1,774,1001,578,-1,578,1008,578,-1,570,1006,570,749,1001,578,4,578,21101,0,756,0,1105,1,786,1105,1,774,21202,-1,-11,1,22101,1182,1,1,21101,0,774,0,1106,0,622,21201,-3,1,-3,1105,1,640,109,-5,2105,1,0,109,7,1005,575,802,20102,1,576,-6,20101,0,577,-5,1106,0,814,21101,0,0,-1,21101,0,0,-5,21101,0,0,-6,20208,-6,576,-2,208,-5,577,570,22002,570,-2,-2,21202,-5,53,-3,22201,-6,-3,-3,22101,1457,-3,-3,1201,-3,0,843,1005,0,863,21202,-2,42,-4,22101,46,-4,-4,1206,-2,924,21101,0,1,-1,1106,0,924,1205,-2,873,21102,1,35,-4,1105,1,924,2102,1,-3,878,1008,0,1,570,1006,570,916,1001,374,1,374,1202,-3,1,895,1101,0,2,0,2102,1,-3,902,1001,438,0,438,2202,-6,-5,570,1,570,374,570,1,570,438,438,1001,578,558,922,20101,0,0,-4,1006,575,959,204,-4,22101,1,-6,-6,1208,-6,53,570,1006,570,814,104,10,22101,1,-5,-5,1208,-5,39,570,1006,570,810,104,10,1206,-1,974,99,1206,-1,974,1101,0,1,575,21102,973,1,0,1106,0,786,99,109,-7,2105,1,0,109,6,21102,1,0,-4,21102,1,0,-3,203,-2,22101,1,-3,-3,21208,-2,82,-1,1205,-1,1030,21208,-2,76,-1,1205,-1,1037,21207,-2,48,-1,1205,-1,1124,22107,57,-2,-1,1205,-1,1124,21201,-2,-48,-2,1106,0,1041,21102,1,-4,-2,1105,1,1041,21102,1,-5,-2,21201,-4,1,-4,21207,-4,11,-1,1206,-1,1138,2201,-5,-4,1059,1202,-2,1,0,203,-2,22101,1,-3,-3,21207,-2,48,-1,1205,-1,1107,22107,57,-2,-1,1205,-1,1107,21201,-2,-48,-2,2201,-5,-4,1090,20102,10,0,-1,22201,-2,-1,-2,2201,-5,-4,1103,2102,1,-2,0,1106,0,1060,21208,-2,10,-1,1205,-1,1162,21208,-2,44,-1,1206,-1,1131,1105,1,989,21101,439,0,1,1106,0,1150,21101,477,0,1,1106,0,1150,21101,0,514,1,21102,1149,1,0,1105,1,579,99,21102,1,1157,0,1105,1,579,204,-2,104,10,99,21207,-3,22,-1,1206,-1,1138,1201,-5,0,1176,2102,1,-4,0,109,-6,2106,0,0,14,11,1,11,30,1,9,1,1,1,9,1,30,1,7,9,5,1,30,1,7,1,1,1,1,1,3,1,5,1,30,1,7,1,1,1,1,1,3,1,5,1,30,1,7,1,1,1,1,1,3,1,5,1,30,1,1,9,1,1,3,1,5,1,30,1,1,1,5,1,3,1,3,1,5,1,30,1,1,1,5,1,3,9,1,1,30,1,1,1,5,1,7,1,3,1,1,1,30,9,7,7,32,1,17,1,34,1,11,9,32,1,11,1,5,1,1,1,32,9,3,1,5,1,1,1,40,1,3,1,5,1,1,1,40,1,3,1,5,1,1,1,40,1,3,1,7,1,40,1,3,1,7,7,34,1,3,1,13,1,30,9,13,1,30,1,3,1,17,1,28,7,17,1,28,1,1,1,21,1,28,1,1,1,21,1,28,1,1,1,21,1,28,1,1,1,21,11,18,1,1,1,32,7,3,9,1,1,32,1,5,1,3,1,9,1,32,1,5,1,3,1,1,9,32,1,5,1,3,1,1,1,40,1,5,1,3,1,1,1,40,1,5,1,3,1,1,1,40,1,5,1,3,1,1,1,40,1,5,1,3,1,1,1,40,1,5,7,40,1,9,1,42,11,42]

computer = Intcode(data)
r = robot()
part1ans = r.part1(computer)
r.printGrid()
print(r.getIntersections())

data2 = data.copy()
data2[0] = 2
com2 = Intcode(data2)
ins = r.generateInstructions()
print(ins)
instructions = r.splitInstructions(ins)
print()
print("instructions:", "'", instructions, "'")

print("part 1:", part1ans)
#com2.setPrintOutput(True)
#com2.setDebug(True)

instructions = get_instructions(r.grid)

nextI = r.part2(com2, instructions, False)

"""
++++++++++++++++++++
L,6,R,12,L,4,L,6,R,6
L,6,R,12,R,6,L,6,R,12
L,6,L,10,L,10,R,6
CCCCCCB..................................
C.....B..................................
C.....B..................................
C.....B..................................
C.....B..................................
C.....B..................................
C.....B.......................AAAAA......
C.....B.......................A...A......
C.....B.......................A...A......
C.....B.......................A...A......
CCCCCCBCCCC.................CCACCCACCCC..
......B...C.................C.A...A...C..
......BBBBBBB...........AAAAAAA...A...C..
..........C.B...........B...C.....A...C..
..........C.B...........B...C.....A...C..
..........C.B...........B...C.....A...C..
..........CAAAAAA.......B.BBBBBBBBABBBB..
............B...A.......B.B.C.....A......
............BBBBABBBBBBBB.B.C.....AAAAAAA
................A.........B.C............
................A.....CCCCBCC............
................A.....B...B..............
................A...AAAAAAA..............
................A...A.B..................
................A...A.B..................
................A...A.B..................
..........BBBBBBABBBBBBB..................
..........A.....A...A....................
..........A.....AAAAA....................
..........A..............................
..........AAAAAAA........................
................A........................
................A.C......................
................A.C......................
................A.C......................
................A.C......................
................ABBBBBB..................
..................C...B..................
..................CCCCBCCCCCC............
......................B.....C............
......................B.....C............
......................B.....C............
......................B.....C............
......................B.....C............
......................B.....C............
......................B.....C............
......................B.....C............
......................B.....C............
......................BCCCCCC............

"""